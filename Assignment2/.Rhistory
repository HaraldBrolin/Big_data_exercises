library(glmnet);
# the library for data and 'confusion matrix'
library(MASS); library(kernlab); library(caret)
install.packages("caret")
library(glmnet);
# the library for data and 'confusion matrix'
library(MASS); library(kernlab); library(caret)
data <- Boston
dim(data)
head(data)
m <- lm(medv~., data = data)
summary(m)
#
set.seed(201711)
id_train <- sample(1:dim(data)[1], dim(data)[1]*0.8)
data_train <- data[id_train, ]
data_test <- data[-id_train, ]
model_0 <- glmnet(x = as.matrix(data_train[,-14]),
y = data_train$medv,
family = "gaussian",
alpha = 1,
lambda = 1)
coef(model_0)
model_1 <- cv.glmnet(x = as.matrix(data_train[,-14]),
y = data_train$medv,
family = "gaussian",
alpha = 1,
#lambda = shrink_par,
#nfolds = dim(data_train)[1]
nfolds = 10)
plot(model_1)
model_1$lambda
model_1$lambda.min
coef(model_1, s = "lambda.min")
summary(m)
data(spam); data <- spam
head(data)
table(data)
View(spam)
table(data$"genotype")
table(data$type)
id <- sample(1:dim(data)[1], 100)
pairs(data[id,1:10], col=data$type[id])
set.seed(2017)
id_train <- sample(1:dim(data)[1], 0.7*dim(data)[1])
data_train <- data[id_train, ]
data_test <- data[-id_train, ]
model_1 <- cv.glmnet(x = as.matrix(data_train[, 1:57]),
y = data_train$type,
family = "binomial",
type.measure = "class",
nfolds = 10)
plot(model_1)
pre_res <- predict(model_1, as.matrix(data_test[,-58]), s = "lambda.min", type = "class")
plot(model_1)
pre_res <- predict(model_1, as.matrix(data_test[,-58]), s = "lambda.min", type = "class")
confusionMatrix(pre_res, data_test$type)
?glmnet
library(readr)
BreastCancerDataTrain <- read_delim("~/Documents/BD/Assignment2/BreastCancerDataTrain.txt",
" ", escape_double = FALSE, trim_ws = TRUE)
View(BreastCancerDataTrain)
> BreastCancerDataTrain <- read_delim("~/Documents/BD/Assignment2/BreastCancerDataTrain.txt",
+     " ", escape_double = FALSE, trim_ws = TRUE)
BreastCancerDataTrain <- read_delim("~/Documents/BD/Assignment2/BreastCancerDataTrain.txt",
+     " ", escape_double = FALSE, trim_ws = TRUE)
BreastCancerDataTrain <- read_delim("~/Documents/BD/Assignment2/BreastCancerDataTrain.txt", " ", escape_double = FALSE, trim_ws = TRUE)
summary(BreastCancerDataTrain)
df_train <- read_delim("~/Documents/BD/Assignment2/BreastCancerDataTrain.txt", " ", escape_double = FALSE, trim_ws = TRUE)
df_train <- read_delim("~/Documents/BD/Assignment2/BreastCancerDataTrain.txt", " ", escape_double = FALSE, trim_ws = TRUE)
summary(df_train)
table(df_train)
table(df_train$Diagnosis)
level(df_train)
levels(df_train)
head(df_train)
View(df_train)
help(prcompt)
??prcomp.default
??prcomp
??prcompt
?prcompt
library("prcompt")
PC<- prcomp(t(df_train))
?t
PC<- prcomp(df_train)
sapply(df_train, mode)
View(df_train)
df_train$dummy <- as.numeric(df_train$Diagnosis == "M")
View(df_train)
table(df_train$dummy)
df_train <- -df_train$Diagnosis
df_train <- df_train[-Diagnosis]
df_train <- df_train[,-Diagnosis]
dim(df_train)
df_train[1,]
df_train[,-1]
df_train <- df_train[,-1]
View(df_train)
PC <- prcomp(t(df_train))
summary(PC)
dim(df_train)
PC$sdev
plot(PC)
PC$x
plot(PC$x)
plot(PC$scale)
PC[PC1]
PC$PC1
PC
type(PC)
[1:11]
PC$x[]
PC$x[,1]
PC$x[,2]
plot(PC$x[,1])
bar_plot(PC$x[,1])
barplot(PC$x[,1])
ggplot2
library(ggplot2)
PC$sdev
PC
PC$rotation
df_train <- read_delim("~/Documents/BD/Assignment2/BreastCancerDataTrain.txt", " ", escape_double = FALSE, trim_ws = TRUE)
df_train$dummy <- as.numeric(df_train$Diagnosis == "M") # Malignt = 1
df_train <- df_train[,-1]
PC <- prcomp(t(df_train))
for (int in c(1,2,3,4,5,6,7,8,9,10,11)){
varName <- paste("PC_", int, sep = "")
assign(varName, PC$x[,int])
}
df_train <- read_delim("~/Documents/BD/Assignment2/BreastCancerDataTrain.txt", " ", escape_double = FALSE, trim_ws = TRUE)
library(readr)
BreastCancerDataTrain <- read_csv("~/Documents/BD/Assignment2/BreastCancerDataTrain.txt")
View(BreastCancerDataTrain)
df_train <- read_delim("~/Documents/BD/Assignment2/BreastCancerDataTrain.txt", " ", escape_double = FALSE, trim_ws = TRUE)
df_train$dummy <- as.numeric(df_train$Diagnosis == "M") # Malignt = 1
df_train <- df_train[,-1]
PC <- prcomp(t(df_train))
for (int in c(1,2,3,4,5,6,7,8,9,10,11)){
varName <- paste("PC_", int, sep = "")
assign(varName, PC$x[,int])
}
View(df_train)
?pairs
df_pc <- data.frame(c(PC_1$x, PC_2$x, PC_3$x, PC_4$x))
df_pc <- data.frame(PC_1$x, PC_2$x, PC_3$x, PC_4$x)
typeof(PC_1$x)
typeof(PC_1)
PC_1$x
PC_1
df_pc <- data.frame(PC_1, PC_2, PC_3, PC_4)
df_pc <- data.frame(PC_1, PC_2, PC_3, PC_4, PC_5)
view(df_pc)
View(df_pc)
pairs(df_pc)
PC
?PC
??PC
View(PC)
print(PC)
PC$x
View(df_train)
View(df_train)
library(ggplot2)
plotmatrix()
install.packages("plotmatrix")
PC
PC[1]
PC[2]
PC$scale
PC$x
install.packages("MASS")
??lda
help(lda)
Iris <- data.frame(rbind(iris3[,,1], iris3[,,2], iris3[,,3]),
Sp = rep(c("s","c","v"), rep(50,3)))
train <- sample(1:150, 75)
table(Iris$Sp[train])
Sp ~ .
z <- lda(Sp ~ ., Iris, prior = c(1,1,1)/3, subset = train)
predict(z, Iris[-train, ])$class
library(lda)
library("lda")
library(MASS)
MASS::lda(Sp ~ ., Iris, prior = c(1,1,1)/3, subset = train)
z <- MASS::lda(Sp ~ ., Iris, prior = c(1,1,1)/3, subset = train)
predict(z, Iris[-train, ])$class
(z1 <- update(z, . ~ . - Petal.W.))
z
df_train <- read_delim("~/Documents/BD/Assignment2/BreastCancerDataTrain.txt", " ", escape_double = FALSE, trim_ws = TRUE)
View(df_train)
?predict
class(z)
?predict.lda
table(df_train$Diagnosis)
model <- lda(df_train$Diagnosis ~ ., df_train)
model
171 / (171 + 2298)
171 / (171 + 298)
predict.lda()
class(model)
library(readr)
df_train <- read_delim("~/Documents/BD/Assignment2/BreastCancerDataTrain.txt", " ", escape_double = FALSE, trim_ws = TRUE)
df_test <- read_delim("~/Documents/BD/Assignment2/BreastCancerDataTest.txt", " ", escape_double = FALSE, trim_ws = TRUE)
model <- lda(df_train$Diagnosis ~ ., df_train)
predict(model, df_test)
pred <- predict(model, df_test)
library(readr)
df_train <- read_delim("~/Documents/BD/Assignment2/BreastCancerDataTrain.txt", " ", escape_double = FALSE, trim_ws = TRUE)
df_train_PC <- df_train
df_train_PC[, 1] <- as.numeric(df_train$Diagnosis == "M") # Malignt = 1
PC <- prcomp(t(df_train_PC))
for (int in c(1,2,3,4,5,6,7,8,9,10,11)){
varName <- paste("PC_", int, sep = "")
assign(varName, PC$x[,int])
}
df_pc <- data.frame(PC_1, PC_2, PC_3, PC_4, PC_5)
pairs(df_pc) # Pairwise scatter plot for first 5 components
df_test <- read_delim("~/Documents/BD/Assignment2/BreastCancerDataTest.txt", " ", escape_double = FALSE, trim_ws = TRUE)
model <- lda(df_train$Diagnosis ~ ., df_train)
pred <- predict(model, df_test)
pred
library(glmnet);
library(MASS); library(kernlab); library(caret)
data <- Boston
data$medv
View(data)
?glm
df_all <- rbind(df_test, df_train)
View(df_all)
library(glmnet);
library(MASS); library(kernlab); library(caret)
data <- Boston
dim(data)
head(data)
m <- lm(medv~., data = data)
summary(m)
set.seed(201711)
id_train <- sample(1:dim(data)[1], dim(data)[1]*0.8)
data_train <- data[id_train, ]
data_test <- data[-id_train, ]
model_0 <- glmnet(x = as.matrix(data_train[,-14]),
y = data_train$medv,
family = "gaussian",
alpha = 1,
lambda = 1)
data_train[,-14]
dim(data_train[,-14])
dim(data_train)
View(data_train)
datasets()
data()
data_train[, 1:57]
model_1$lambda.min
model_1 <- cv.glmnet(x = as.matrix(data_train[,-14]),
y = data_train$medv,
family = "gaussian",
alpha = 1,
#lambda = shrink_par,
#nfolds = dim(data_train)[1]
nfolds = 10)
plot(model_1)
model_1$lambda.min
model_1$lambda
model_1$lambda
model_1$lambda.1se
model_1$lambda.min
log(model_1$lambda.min)
log(model_1$lambda.1se)
data(spam); data <- spam
View(data)
View(data)
library(readr)
library(glmnet)
library(MASS); library(kernlab); library(caret)
df_train <- read_delim("~/Documents/BD/Assignment2/BreastCancerDataTrain.txt", " ", escape_double = FALSE, trim_ws = TRUE)
df_train_PC <- df_train
df_train_PC[, 1] <- as.numeric(df_train$Diagnosis == "M") # Malignt = 1
PC <- prcomp(t(df_train_PC))
for (int in c(1,2,3,4,5,6,7,8,9,10,11)){
varName <- paste("PC_", int, sep = "")
assign(varName, PC$x[,int])
}
df_pc <- data.frame(PC_1, PC_2, PC_3, PC_4, PC_5)
pairs(df_pc) # Pairwise scatter plot for first 5 components
df_test <- read_delim("~/Documents/BD/Assignment2/BreastCancerDataTest.txt", " ", escape_double = FALSE, trim_ws = TRUE)
lda_model <- lda(df_train$Diagnosis ~ ., df_train)
pred <- predict(model, df_test)
df_all <- rbind(df_test, df_train)
View(df_all[,-1])
lr_model <- cv.glmnet(x = as.matrix(df_all[, -1]),
y = as.matrix(df_all$Diagnosis), family = "binomial",
type.measure = "class")
lr_model
plot(lr_model)
lr_model <- cv.glmnet(x = as.matrix(df_all[, -1]),
y = as.matrix(df_all$Diagnosis), family = "binomial",
type.measure = "class", nfolds = 10)
plot(lr_model)
??cv.glmnet
lr_model <- cv.glmnet(x = as.matrix(df_all[, -1]),
y = as.matrix(df_all$Diagnosis), family = "binomial",
type.measure = "class", nfolds = 11)
plot(lr_model)
lr_model <- cv.glmnet(x = as.matrix(df_all[, -1]),
y = as.matrix(df_all$Diagnosis), family = "binomial",
type.measure = "class", nfolds = 11)
plot(lr_model)
lr_model <- cv.glmnet(x = as.matrix(df_all[, -1]),
y = as.matrix(df_all$Diagnosis), family = "binomial",
type.measure = "class", nfolds = 10)
plot(lr_model)
pred
library(readr)
library(glmnet)
# the library for data and 'confusion matrix'
library(MASS); library(kernlab); library(caret)
df_train <- read_delim("~/Documents/BD/Assignment2/BreastCancerDataTrain.txt", " ", escape_double = FALSE, trim_ws = TRUE)
df_train_PC <- df_train
df_train_PC[, 1] <- as.numeric(df_train$Diagnosis == "M") # Malignt = 1
#df_train <- df_train[,-1]
PC <- prcomp(t(df_train_PC))
for (int in c(1,2,3,4,5,6,7,8,9,10,11)){
varName <- paste("PC_", int, sep = "")
assign(varName, PC$x[,int])
}
df_pc <- data.frame(PC_1, PC_2, PC_3, PC_4, PC_5)
pairs(df_pc) # Pairwise scatter plot for first 5 components
# --------------------------------------
# Task 2 # Testa Cross validations !!!!!!
df_test <- read_delim("~/Documents/BD/Assignment2/BreastCancerDataTest.txt", " ", escape_double = FALSE, trim_ws = TRUE)
lda_model <- lda(df_train$Diagnosis ~ ., df_train)
lda_pred <- predict(model, df_test)
#---------------------------------------
# Task 3
# Köra på hela datasettet eller på training sen test
# First merge data test and train
df_all <- rbind(df_test, df_train)
lr_model <- cv.glmnet(x = as.matrix(df_all[, -1]),
y = as.matrix(df_all$Diagnosis), family = "binomial",
type.measure = "class", nfolds = 10)
# model_1 <- cv.glmnet(x = as.matrix(data_train[, 1:57]),
#                     y = data_train$type,
#                     family = "binomial",
#                     type.measure = "class",
#                     nfolds = 10)
library(readr)
library(glmnet)
# the library for data and 'confusion matrix'
library(MASS); library(kernlab); library(caret)
df_train <- read_delim("~/Documents/BD/Assignment2/BreastCancerDataTrain.txt", " ", escape_double = FALSE, trim_ws = TRUE)
df_train_PC <- df_train
df_train_PC[, 1] <- as.numeric(df_train$Diagnosis == "M") # Malignt = 1
#df_train <- df_train[,-1]
PC <- prcomp(t(df_train_PC))
for (int in c(1,2,3,4,5,6,7,8,9,10,11)){
varName <- paste("PC_", int, sep = "")
assign(varName, PC$x[,int])
}
df_pc <- data.frame(PC_1, PC_2, PC_3, PC_4, PC_5)
pairs(df_pc) # Pairwise scatter plot for first 5 components
# --------------------------------------
# Task 2 # Testa Cross validations !!!!!!
df_test <- read_delim("~/Documents/BD/Assignment2/BreastCancerDataTest.txt", " ", escape_double = FALSE, trim_ws = TRUE)
lda_model <- lda(df_train$Diagnosis ~ ., df_train)
lda_pred <- predict(lda_model, df_test)
#---------------------------------------
# Task 3
# Köra på hela datasettet eller på training sen test
# First merge data test and train
df_all <- rbind(df_test, df_train)
lr_model <- cv.glmnet(x = as.matrix(df_all[, -1]),
y = as.matrix(df_all$Diagnosis), family = "binomial",
type.measure = "class", nfolds = 10)
# model_1 <- cv.glmnet(x = as.matrix(data_train[, 1:57]),
#                     y = data_train$type,
#                     family = "binomial",
#                     type.measure = "class",
#                     nfolds = 10)
lda_pred
lr_model
lr_model <- cv.glmnet(x = as.matrix(df_train[, -1]),
y = as.matrix(df_train$Diagnosis), family = "binomial",
type.measure = "class", nfolds = 10)
pre_res <- predict(lr_model, as.matrix(df_test[, -1]), s = "lambda.min", type = "class")
??confusionMatrix
confusionMatrix(pre_res, df_test$Diagnosis)
knn_model <- knn(df_train, df_test, cl, k = 5)
library(knn)
install.packages("knn")
knn_model <- knn(df_train, df_test, cl, k = 5)
class::knn(df_train, df_test, cl, k = 5)
knn(df_train, df_test, cl, k = 5)
?knn3
??knn3
knn_model <- knn3(df_train$Diagnosis ~ ., df_train, k = 5)
library(caret)
knn_model <- knn3(df_train$Diagnosis ~ ., df_train, k = 5)
knn_model
plot(knn_model)
print(knn_model)
knn3Train(df_train, df_test, cl, k = 5, l = 0, prob = TRUE, use.all = TRUE)
knn3Train(df_train, df_test, k = 5, l = 0, prob = TRUE, use.all = TRUE)
knn3Train(df_train, df_test, df_train$Diagnosis, k = 5, l = 0, prob = TRUE, use.all = TRUE)
cl <- factor(c(rep("s",25), rep("c",25), rep("v",25)))
cl
irisFit1 <- knn3(Species ~ ., iris)
irisFit2 <- knn3(as.matrix(iris[, -5]), iris[,5])
data(iris3)
train <- rbind(iris3[1:25,,1], iris3[1:25,,2], iris3[1:25,,3])
test <- rbind(iris3[26:50,,1], iris3[26:50,,2], iris3[26:50,,3])
cl <- factor(c(rep("s",25), rep("c",25), rep("v",25)))
View(train)
iris3[1:25,,1]
iris3[1:25,1]
iris3[1:25]
iris3[1:25,]
class(iris3)
iris3[1]
iris3[[1]]
iris3[1
]
iris3[2]
iris3[1:25]
iris3[1:51]
iris3[51]
iris3[50]
iris3[52]
iris3
iris3[1:25,,1]
iris3[1:25,,2]
iris3[1:25,1,2]
iris3[1:25,1,1]
iris3[1:25,,1]
iris3[1:25,2,1]
cl <- df_train$Diagnosis''
cl <- df_train$Diagnosis
cl
knn3Train(df_train, df_test, cl, k = 5, l = 0, prob = TRUE, use.all = TRUE)
knn3Train(df_train, df_test, cl, k = 5, l = 0)
knn3Train(df_train, df_test, cl, k = 5)
knn(df_train, df_test, cl, k = 5, l = 0)
library(class)
knn(df_train, df_test, cl, k = 5, l = 0)
cl <- df_test$Diagnosis
knn(df_train, df_test, cl, k = 5, l = 0)
cl <- c(df_test$Diagnosis)
knn(df_train, df_test, cl, k = 5, l = 0)
cl <- c(df_train$Diagnosis)
knn(df_train, df_test, cl, k = 5, l = 0)
cl <- factor(df_train$Diagnosis)
cl
knn(df_train, df_test, cl, k = 5, l = 0)
cl <- factor(c(df_train$Diagnosis))
knn(df_train, df_test, cl, k = 5, l = 0)
cl <- df_train$Diagnosis
knn(df_train, df_test, cl, k = 5)
knn(df_train, df_test, cl, k =3)
cl <- df_train_PC$Diagnosis
df_test_PC <- df_test
df_test_PC[, 1] <- as.numeric(df_test$Diagnosis == "M")
knn(df_train_PC, df_test_PC, cl, k = 5)
View(df_train)
knn_model <- knn(df_train_PC, df_test_PC, cl, k = 5)
knn_model
