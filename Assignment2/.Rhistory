df_test <- df[sample(nrow(iris), 117), ]
117(465)
117/(465)
df_train <- df[-df_test]
df_test <- as.dataframe(df[sample(nrow(iris), 117), ])
df_test <- as.data.frame(df[sample(nrow(iris), 117), ])
df_train <- df[-df_test]
df_train <- df[-df]
df_train <- df[-df,]
df_train <- df[-df_test,]
df_train <- df[-df_test]
View(df_test)
nrow(iris)
nrow(radius)
iris
df_test <- as.data.frame(df[sample(nrow(df$radius), 117), ])
df_test <- as.data.frame(df[sample(nrow(df), 117), ])
df_test
df_train <- df[-df_test,]
df_train <- df[df_test,]
typeof(df_test)
df_test <- sample(nrow(df), 117)
df_train <- df[df_test,]
df_test <- df[df_test,]
df_test <- sample(nrow(df), 117)
library(readr); library(glmnet); library(MASS); library(kernlab); library(caret)
set.seed(42)
df <- read.csv("BreastCancerDataTrain.txt", header = TRUE, sep = " ")
df$Diagnosis <- as.numeric(df$Diagnosis == "M")
df_test <- sample(nrow(df), 117)
df_train <- df[-df_test,]
df_test <- df[df_test,]
PC <- prcomp(t(df_train[-1]))
for (int in c(1,2,3,4,5,6,7,8,9,10,11)){
varName <- paste("PC_", int, sep = "")
assign(varName, PC$x[,int])
}
PC <- prcomp(t(df_train[, -1]))
for (int in c(1,2,3,4,5,6,7,8,9,10,11)){
varName <- paste("PC_", int, sep = "")
assign(varName, PC$x[,int])
}
df <- read.csv("BreastCancerDataTrain.txt", header = TRUE, sep = " ")
df$Diagnosis <- as.numeric(df$Diagnosis == "M")
df_test <- sample(nrow(df), 117)
df_train <- df[-df_test,]
df_test <- df[df_test,]
PC <- prcomp(t(df_train[, -1]))
for (int in c(1,2,3,4,5,6,7,8,9,10,11)){
varName <- paste("PC_", int, sep = "")
assign(varName, PC$x[,int])
}
View(df)
PC <- prcomp(t(df_train[, -1]))
for (int in c(1,2,3,4,5,6,7,8,9,10)){
varName <- paste("PC_", int, sep = "")
assign(varName, PC$x[,int])
}
df_pc <- data.frame(PC_1, PC_2, PC_3, PC_4, PC_5)
pairs(df_pc)
lda_model <- lda(df_train$Diagnosis ~ ., df_train)
lda_pred <- predict(lda_model, df_test)
table(lda_pred$class, df_test$Diagnosis) # See the accuracy
lr_model <- cv.glmnet(x = as.matrix(df_train[, -1]),
y = as.matrix(df_train$Diagnosis), family = "binomial",
type.measure = "class", nfolds = 10) # Kan Ã¤ndra nfolds
pre_res <- predict(lr_model, as.matrix(df_test[, -1]), s = "lambda.min", type = "class")
confusionMatrix(pre_res, df_test$Diagnosis)
confusionMatrix(lda_pred$class, df_test$Diagnosis)
table(lda_pred$class, df_test$Diagnosis) # See the accuracy
confusionMatrix(lda_pred$class, df_test$Diagnosis)
confusionMatrix(pre_res, df_test$Diagnosis)
knn_model <- knn3Train(df_train, df_test, df_train$Diagnosis, k = 5, l = 0, prob = TRUE, use.all = TRUE)
table(knn_model[1:100], df_test$Diagnosis)
confusionMatrix(knn_model, df_test$Diagnosis)
library(readr)
GeneExpressionData <- read_delim("~/Desktop/Big_data/Big_data_exercises/Assignment2/GeneExpressionData.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(GeneExpressionData)
MetaData <- read_delim("~/Desktop/Big_data/Big_data_exercises/Assignment2/MetaData.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
dim(GeneExpressionData)
GeneExpressionData <- read_delim("~/Desktop/Big_data/Big_data_exercises/Assignment2/GeneExpressionData.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
MetaData <- read_delim("~/Desktop/Big_data/Big_data_exercises/Assignment2/MetaData.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
set.seed(2017)
dim(GeneExpressionData)
View(GeneExpressionData)
227*0.8
df_test <- sample(nrow(df), 182)
df_train <- df[-df_test,]
df_test <- df[df_test,]
df_test <- sample(nrow(GeneExpressionData), 182)
df_train <- GeneExpressionData[-df_test,]
df_test <- GeneExpressionData[df_test,]
library(readr)
GeneExpressionData <- read_delim("~/Desktop/Big_data/Big_data_exercises/Assignment2/GeneExpressionData.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
MetaData <- read_delim("~/Desktop/Big_data/Big_data_exercises/Assignment2/MetaData.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
set.seed(2017)
View(GeneExpressionData)
20532*0,8
20532*0.8
View(MetaData)
df_test <- sample(rcol(GeneExpressionData), 16426)
df_train <- GeneExpressionData[-df_test,]
df_test <- GeneExpressionData[df_test,]
df_test <- sample(nrow(GeneExpressionData), 16426)
df_train <- GeneExpressionData[-df_test,]
df_test <- GeneExpressionData[df_test,]
View(df_test)
df_train <- GeneExpressionData[df_test,]
df_test <- GeneExpressionData[-df_test,]
library(readr)
GeneExpressionData <- read_delim("~/Desktop/Big_data/Big_data_exercises/Assignment2/GeneExpressionData.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
MetaData <- read_delim("~/Desktop/Big_data/Big_data_exercises/Assignment2/MetaData.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
set.seed(2017)
df_test <- sample(nrow(GeneExpressionData), 16426)
df_train <- GeneExpressionData[df_test,]
df_test <- GeneExpressionData[-df_test,]
sample(nrow(GeneExpressionData), 16426)
df_test <- sample(nrow(GeneExpressionData), nrow(GeneExpressionData) * 0.2)
df_train <- GeneExpressionData[df_test,]
df_test <- GeneExpressionData[-df_test,]
library(readr)
GeneExpressionData <- read_delim("~/Desktop/Big_data/Big_data_exercises/Assignment2/GeneExpressionData.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
MetaData <- read_delim("~/Desktop/Big_data/Big_data_exercises/Assignment2/MetaData.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
set.seed(2017)
df_test <- sample(nrow(GeneExpressionData), nrow(GeneExpressionData) * 0.2)
df_train <- GeneExpressionData[df_test,]
df_test <- GeneExpressionData[-df_test,]
df_test <- sample(nrow(GeneExpressionData), nrow(GeneExpressionData) * 0.2)
df_train <- GeneExpressionData[-df_test,]
df_test <- GeneExpressionData[df_test,]
View(MetaData)
View(GeneExpressionData)
nrow(MetaData) * 0.8
GeneExpressionData <- read_delim("~/Desktop/Big_data/Big_data_exercises/Assignment2/GeneExpressionData.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
set.seed(2017)
GeneExpressionData <- GeneExpressionData[,-1]
df_test <- sample(nrow(GeneExpressionData), nrow(GeneExpressionData) * 0.2)
df_train <- GeneExpressionData[-df_test,]
df_test <- GeneExpressionData[df_test,]
View(GeneExpressionData)
names(GeneExpressionData)
index(GeneExpressionData)
t(GeneExpressionData)
gene_t <- t(GeneExpressionData)
View(gene_t)
as.data.frame(gene_t) <- t(GeneExpressionData)
gene_t <- as.data.frame(t(GeneExpressionData))
dim(gene_t)
dim(GeneExpressionData)
rownames(GeneExpressionData)
rownames(gene_t)
rownames(GeneExpressionData)
set.seed(2017)
GeneExpressionData <- GeneExpressionData[,-1]
t_gene <- t(GeneExpressionData)
names(t_gene) <- rownames(GeneExpressionData)
rownames(t_gene) <- names(GeneExpressionData)
View(t_gene)
GeneExpressionData <- read_delim("~/Desktop/Big_data/Big_data_exercises/Assignment2/GeneExpressionData.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
MetaData <- read_delim("~/Desktop/Big_data/Big_data_exercises/Assignment2/MetaData.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
set.seed(2017)
GeneExpressionData <- GeneExpressionData[,-1]
t_gene <- t(GeneExpressionData)
names(t_gene) <- rownames(GeneExpressionData)
rownames(t_gene) <- names(GeneExpressionData)
t_gene <- as.data.frame(t(GeneExpressionData))
names(t_gene) <- rownames(GeneExpressionData)
rownames(t_gene) <- names(GeneExpressionData)
View(t_gene)
dim(t_gene)
df_test <- sample(nrow(t_gene), nrow(t_gene) * 0.2)
df_train <- t_gene[-df_test,]
df_test <- t_gene[df_test,]
View(df_test)
View(df_train)
View(MetaData)
PC <- prcomp(t(GeneExpressionData))
for (int in c(1,2,3,4,5,6,7,8,9,10)){
varName <- paste("PC_", int, sep = "")
assign(varName, PC$x[,int])
}
df_pc <- data.frame(PC_1, PC_2, PC_3, PC_4, PC_5)
pairs(df_pc)
df_pc
df_pc$PC_1
PC
PC$x
df <- read.csv("BreastCancerDataTrain.txt", header = TRUE, sep = " ")
View(df)
View(GeneExpressionData)
PC <- prcomp(t(t_gene))
for (int in c(1,2,3,4,5,6,7,8,9,10)){
varName <- paste("PC_", int, sep = "")
assign(varName, PC$x[,int])
}
df_pc <- data.frame(PC_1, PC_2, PC_3, PC_4, PC_5)
pairs(df_pc)
PC <- prcomp(t(GeneExpressionData))
for (int in c(1,2,3,4,5,6,7,8,9,10)){
varName <- paste("PC_", int, sep = "")
assign(varName, PC$x[,int])
}
df_pc <- data.frame(PC_1, PC_2, PC_3, PC_4, PC_5)
pairs(df_pc)
PC$x[1]
PC$x[1,]
dim(PC$x[1,])
length(PC$x[1,])
PC_1$x
PC_1
PC$x
View(t_gene)
PC$x[1,]
PC$x[,1]
View(gene_t)
GeneExpressionData <- read_delim("~/Desktop/Big_data/Big_data_exercises/Assignment2/GeneExpressionData.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
MetaData <- read_delim("~/Desktop/Big_data/Big_data_exercises/Assignment2/MetaData.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
set.seed(2017)
GeneExpressionData <- GeneExpressionData[,-1]
t_gene <- as.data.frame(t(GeneExpressionData))
names(t_gene) <- rownames(GeneExpressionData)
rownames(t_gene) <- names(GeneExpressionData)
GeneExpressionData <- read_delim("~/Desktop/Big_data/Big_data_exercises/Assignment2/GeneExpressionData.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
set.seed(2017)
GeneExpressionData <- GeneExpressionData[,-1]
t_gene <- as.data.frame(t(GeneExpressionData))
names(t_gene) <- rownames(GeneExpressionData)
rownames(t_gene) <- names(GeneExpressionData)
df_test <- sample(nrow(t_gene), nrow(t_gene) * 0.2)
df_train <- t_gene[-df_test,]
df_test <- t_gene[df_test,]
PC <- prcomp(t(GeneExpressionData))
PC$x
PC[1]
PC$x[1]
PC$x[1,]
pc_df <-  as.data.frame(PC$x[1,])
pc_df <-  as.data.frame(PC$x)
View(pc_df)
PC <- prcomp(t(t_gene))
for (int in c(1,2,3,4,5,6,7,8,9,10)){
varName <- paste("PC_", int, sep = "")
assign(varName, PC$x[,int])
}
df_pc <- data.frame(PC_1, PC_2, PC_3, PC_4, PC_5)
pc_df <-  as.data.frame(PC$x)
View(pc_df)
PC <- prcomp(t(GeneExpressionData))
pc_df <-  as.data.frame(PC$x)
View(pc_df)
MetaData <- read_delim("~/Desktop/Big_data/Big_data_exercises/Assignment2/MetaData.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
rownames(pc_df) == MetaData$ID
df_PC <-  as.data.frame(PC$x)
GeneExpressionData <- read_delim("~/Desktop/Big_data/Big_data_exercises/Assignment2/GeneExpressionData.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
MetaData <- read_delim("~/Desktop/Big_data/Big_data_exercises/Assignment2/MetaData.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
set.seed(2017)
GeneExpressionData <- GeneExpressionData[,-1]
PC <- prcomp(t(GeneExpressionData))
df_PC <-  as.data.frame(PC$x)
df_PC <- cbind(MetaData$SubType, df_PC)
View(df_PC)
names(df_PC)[1] <- "Subtype"
View(df_PC)
df_PC$Subtype <- as.numeric(df$Diagnosis == "M")
df_PC$Subtype <- as.numeric(df_PC$Subtype == "M")
df_PC <- cbind(MetaData$SubType, df_PC)
names(df_PC)[1] <- "Subtype"
df_PC$Subtype <- as.numeric(df_PC$Subtype == "IDHmut-codel")
View(df_PC)
df_PC[2]
df_PC[2,]
df_PC[2]
df_PC <- df_PC[-2]
View(df_PC)
df_test <- sample(nrow(df_PC), nrow(df_PC) * 0.2)
df_train <- df_PC[-df_test,]
df_test <- df_PC[df_test,]
46+226
45+181
data(spam); data <- spam
head(data)
dim(data)
id <- sample(1:dim(data)[1], 100)
id
max(id)
pairs(data[id,1:10], col=data$type[id])
View(data)
lg_model <- cv.glmnet(x = as.matrix(df_train[, -1]),
y = df_train$Subtype,
family = "binomial",
type.measure = "class",
nfolds = 10)
plot(lg_model)
pre_res <- predict(lg_model, as.matrix(df_test[,-1]), s = "lambda.min", type = "class")
confusionMatrix(pre_res, data_test$type)
confusionMatrix(pre_res, df_test$Subtype)
View(df_PC)
colnames(df_PC)
ans <- confusionMatrix(pre_res, df_test$Subtype)
ans
ans$ table
ans$dots
ans$positive
ans$overall
ans_lst
ans_lst <- array()
append(ans_lst, ans)
ans_lsy
ans_lst
ans_lst[1]
ans_lst <- list()
append(ans_lst, ans)
ans_lst
ans_lst <- ans
ans_lst
ans_lst <- c(ans_lst, ans)
ans_lst
ans$overall
ans_lst <- ans$overall
ans_lst <- c(ans_lst, ans$overall)
ans_lst
ans_lst <- c(ans_lst, 1, ans$overall)
ans_lst
names(ans$overall)
df_ans <- as.data.frame(ans$overall)
df_ans <- rbind(as.data.frame(ans$overall))
View(df_ans)
df_ans <- rbind(as.data.frame(ans$overall))
r <- [1:10]
r <- range[1:10]
range(1:10)
range(10)
1:10
for (k in 1:10){
print(k)
}
df_train[1:1]
df_train[-1,][1:1]
df_train[2:2]
df_train[2:k]
df_train[2:2]
df_train[2:3]
df_train[2:4]
lg_model <- cv.glmnet(x = as.matrix(df_train[, -1]),
y = df_train$Subtype,
family = "binomial",
type.measure = "class",
nfolds = 10)
plot(lg_model)
pre_res <- predict(lg_model, as.matrix(df_test[,-1]), s = "lambda.min", type = "class")
ans <- confusionMatrix(pre_res, df_test$Subtype)
library(readr)
GeneExpressionData <- read_delim("~/Desktop/Big_data/Big_data_exercises/Assignment2/GeneExpressionData.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
MetaData <- read_delim("~/Desktop/Big_data/Big_data_exercises/Assignment2/MetaData.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
set.seed(2017)
GeneExpressionData <- GeneExpressionData[,-1]
PC <- prcomp(t(GeneExpressionData))
df_PC <-  as.data.frame(PC$x)
df_PC <- cbind(MetaData$SubType, df_PC)
names(df_PC)[1] <- "Subtype"
df_PC$Subtype <- as.numeric(df_PC$Subtype == "IDHmut-codel")
df_test <- sample(nrow(df_PC), nrow(df_PC) * 0.2) # Selscts 20% as test data
df_train <- df_PC[-df_test,]
df_test <- df_PC[df_test,]
for (k in 2:2){
lg_model <- cv.glmnet(x = as.matrix(df_train[2:k]),
y = df_train$Subtype,
family = "binomial",
type.measure = "class",
nfolds = 10)
pre_res <- predict(lg_model, as.matrix(df_test[2:k]), s = "lambda.min", type = "class")
ans <- confusionMatrix(pre_res, df_test$Subtype)
ans$overall
}
df_PC[-1]
df_PC[-2]
(df_PC[-1])[2]
(df_PC[-1])[1:4]
for (k in 1:10){
lg_model <- cv.glmnet(x = as.matrix((df_train[-1])[1:k]),
y = df_train$Subtype,
family = "binomial",
type.measure = "class",
nfolds = 10)
pre_res <- predict(lg_model, as.matrix((df_test[-1])[1:k]), s = "lambda.min", type = "class")
ans <- confusionMatrix(pre_res, df_test$Subtype)
ans$overall
}
library(readr)
GeneExpressionData <- read_delim("~/Desktop/Big_data/Big_data_exercises/Assignment2/GeneExpressionData.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
MetaData <- read_delim("~/Desktop/Big_data/Big_data_exercises/Assignment2/MetaData.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
set.seed(2017)
GeneExpressionData <- GeneExpressionData[,-1]
PC <- prcomp(t(GeneExpressionData))
df_PC <-  as.data.frame(PC$x)
df_PC <- cbind(MetaData$SubType, df_PC)
names(df_PC)[1] <- "Subtype"
df_PC$Subtype <- as.numeric(df_PC$Subtype == "IDHmut-codel")
df_test <- sample(nrow(df_PC), nrow(df_PC) * 0.2) # Selscts 20% as test data
df_train <- df_PC[-df_test,]
df_test <- df_PC[df_test,]
for (k in 2:20){
lg_model <- cv.glmnet(x = as.matrix((df_train[-1])[1:k]),
y = df_train$Subtype,
family = "binomial",
type.measure = "class",
nfolds = 10)
pre_res <- predict(lg_model, as.matrix((df_test[-1])[1:k]), s = "lambda.min", type = "class")
ans <- confusionMatrix(pre_res, df_test$Subtype)
ans$overall
}
ans
ans$overall
print(ans$overall)
for (k in 2:20){
lg_model <- cv.glmnet(x = as.matrix((df_train[-1])[1:k]),
y = df_train$Subtype,
family = "binomial",
type.measure = "class",
nfolds = 10)
pre_res <- predict(lg_model, as.matrix((df_test[-1])[1:k]), s = "lambda.min", type = "class")
ans <- confusionMatrix(pre_res, df_test$Subtype)
print(ans$overall)
}
9.777778e-0
9.777778e-01
print("Number of PC" + k)
a <-  1
print("Number of PC" + a)
print("Number of PC"  a)
print("Number of PC")
print("Number of PC") + a
print("Number of PC") a
cat("Test: ", a)
for (k in 2:20){
lg_model <- cv.glmnet(x = as.matrix((df_train[-1])[1:k]),
y = df_train$Subtype,
family = "binomial",
type.measure = "class",
nfolds = 10)
pre_res <- predict(lg_model, as.matrix((df_test[-1])[1:k]), s = "lambda.min", type = "class")
ans <- confusionMatrix(pre_res, df_test$Subtype)
cat("Number of PC: " + k)
print(ans$overall)
}
for (k in 2:20){
lg_model <- cv.glmnet(x = as.matrix((df_train[-1])[1:k]),
y = df_train$Subtype,
family = "binomial",
type.measure = "class",
nfolds = 10)
pre_res <- predict(lg_model, as.matrix((df_test[-1])[1:k]), s = "lambda.min", type = "class")
ans <- confusionMatrix(pre_res, df_test$Subtype)
cat("Number of PC: ", k)
print(ans$overall)
}
cat("Number of PC: ", k, "\n")
for (k in 2:20){
lg_model <- cv.glmnet(x = as.matrix((df_train[-1])[1:k]),
y = df_train$Subtype,
family = "binomial",
type.measure = "class",
nfolds = 10)
pre_res <- predict(lg_model, as.matrix((df_test[-1])[1:k]), s = "lambda.min", type = "class")
ans <- confusionMatrix(pre_res, df_test$Subtype)
cat("Number of PC: ", k, "\n")
print(ans$overall)
}
lg_model <- cv.glmnet(x = as.vector((df_train[-1])[1:1]),
y = df_train$Subtype,
family = "binomial",
type.measure = "class",
nfolds = 10)
lg_model
data(spam); data <- spam
head(data)
dim(data)
id <- sample(1:dim(data)[1], 100)
pairs(data[id,1:10], col=data$type[id])
set.seed(2017)
id_train <- sample(1:dim(data)[1], 0.7*dim(data)[1])
data_train <- data[id_train, ]
data_test <- data[-id_train, ]
model_1 <- cv.glmnet(x = as.matrix(data_train[, 1:57]),
y = data_train$type,
family = "binomial",
type.measure = "class",
nfolds = 10)
plot(model_1)
